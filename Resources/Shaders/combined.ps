#version 410

in vec3 position_eye;
in vec3 normal_eye;
uniform samplerCube cSampler;

uniform mat4 view; // view matrix

uniform float ratio;
uniform float reflectFactor;
out vec4 FragColor;

void main () 
{
	/* reflect ray around normal from eye to surface */
	vec3 incident_eye = normalize (position_eye);
	vec3 normal = normalize (normal_eye);

	vec3 refracted = refract (incident_eye, normal, ratio);
	refracted = vec3 (inverse (view) * vec4 (refracted, 0.0));
    vec4 refractColor = texture(cSampler, refracted);

	vec3 reflected = reflect (incident_eye, normal);
	reflected = vec3 (inverse (view) * vec4 (reflected, 0.0));
    vec4 reflectColor = texture(cSampler, reflected);

	FragColor = mix(refractColor, reflectColor, reflectFactor);
}
