#version 400

uniform vec3 ambientColor;
uniform vec3 specularColor;
uniform vec3 diffuseColor;

uniform float ambientIntensity;
uniform float specularIntensity;
uniform float diffuseIntensity;

uniform float specularShininess;
uniform vec3 vLightDir;

in vec3 position_eye;
in vec3 normal_eye;

in vec2 texCoord0;
uniform sampler2D gSampler;

uniform mat4 view;

out vec4 FragColor;

void main()
{
	float intensity;
	vec4 color = texture(gSampler,texCoord0);

    vec4 ambientC = vec4(ambientColor, 1.0f) * ambientIntensity;
	vec4 diffuseC = vec4(diffuseColor, 1.0f) * diffuseIntensity * max(0.0, dot(normalize(normal_eye), -vLightDir));	

	vec3 surface_to_viewer_eye = normalize (position_eye);

	vec3 reflection_eye = reflect (-vLightDir, normal_eye);
	float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);
	dot_prod_specular = max (dot_prod_specular, 0.0);
	float specular_factor = pow (dot_prod_specular, specularShininess);

	// blinn
	//vec3 half_way_eye = normalize (surface_to_viewer_eye + vLightDir);
	//float dot_prod_specular = max (dot (half_way_eye, normal_eye), 0.0);
	//float specular_factor = pow (dot_prod_specular, specularShininess);

	vec4 specularC = vec4(specularColor, 1.0f) * specularIntensity * specular_factor;
	FragColor = color * (diffuseC + ambientC + specularC);
};


