#version 430

uniform sampler2D gSampler;
uniform sampler2D nSampler;

// parallaxScale of the depth map so the 0-1 range looks good in whatever unit parallaxScale
// the application is using.
uniform float parallaxScale;


// tangent space stuff:

in vec3 toCameraInTangent0;
in vec3 toLightInTangent0;
in vec3 position_tan;

in vec2 texCoord0;
//eye space stuff:

in vec3 position_eye;

out vec4 FragColor;

// The two searches are separated so only one can be used to get less accurate,
// but faster, shadows. But it's not used like that since the quality isn't
// great.

float ray_intersect_rm(in vec2 dp, in vec2 ds)
{
    const int linear_steps = 60; 
    const int binary_steps = 16;

    float depth_step = 1.0 / linear_steps; 
    float size = depth_step; // current size of search window

    float depth = 0.0; // current depth position

    float best_depth = 1.0; 

    for(int i = 0; i < linear_steps-1; i++)
    {
        depth += size; 

        vec4 t = texture2D(nSampler, dp+ds*depth);

        if(best_depth > 0.996) // if no depth found yet
        {
            if(depth >= t.w)
            {
                best_depth = depth;
            }
        }
    }

    depth = best_depth;

    for(int i = 0; i < binary_steps; i++)
    {
       size *= 0.5; 
       vec4 t = texture2D(nSampler, dp+ds*depth);
       
       if(depth >= t.w)
       {
            best_depth = depth;
            depth -= 2 * size;
       }
       depth += size;
    }

    return best_depth;
}

void main()
{
    vec2 dp = texCoord0.st; 
    vec2 ds = (toCameraInTangent0.xy / -toCameraInTangent0.z) * parallaxScale;

    float distance = ray_intersect_rm(dp, ds);

    vec2 uv = dp + ds * distance;

    vec3 norm = texture2D(nSampler, uv).rgb;
    vec4 color = texture2D(gSampler, uv);
    vec4 col = color * vec4(0.1, 0.1, 0.1, 1.0);

    norm = normalize(norm * 2.0 - 1.0);

    vec3 P_tan = position_tan + (toCameraInTangent0 / -toCameraInTangent0.z) * parallaxScale * distance;

    vec3 p_toLightInTangent0 = (position_tan + toLightInTangent0) - P_tan;

    float n_dot_l = max(dot(norm, normalize(p_toLightInTangent0)), 0.0);
   
    if(n_dot_l > 0.0)
    {
        dp += ds * distance;
        ds = (toLightInTangent0.xy / -toLightInTangent0.z) * parallaxScale;
        dp -= ds * distance;
        
        float dl = ray_intersect_rm(dp, ds);

        if(dl < distance-0.05) // if pixel in shadow
        {
            col += color * 0.2 * n_dot_l;
        }
        else
        {
            col += color * n_dot_l;
            vec3 H = normalize(p_toLightInTangent0 + toCameraInTangent0);
            col += vec4(0.5, 0.5, 0.5, 1.0) * pow(max(dot(norm,H),0.0), 64.0);
        }

    }

    FragColor = col;

}