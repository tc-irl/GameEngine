#version 410

in vec3 position_eye;
in vec3 normal_eye;
uniform samplerCube cSampler;

uniform mat4 view; // view matrix

uniform float ratioR;
uniform float ratioG;
uniform float ratioB;
out vec4 FragColor;

void main () 
{
	vec3 incident_eye = normalize (position_eye);
	vec3 normal = normalize (normal_eye);
	vec4 color = vec4(0.0);

	vec3 refractedVecR = refract(incident_eye, normal, ratioR);
	refractedVecR = vec3 (inverse(view) * vec4(refractedVecR, 0.0));

	vec3 refractedVecG = refract(incident_eye, normal, ratioG);
	refractedVecG = vec3 (inverse(view) * vec4(refractedVecG, 0.0));

	vec3 refractedVecB = refract(incident_eye, normal, ratioB);
	refractedVecB = vec3 (inverse(view) * vec4(refractedVecB, 0.0));

	color.r = texture (cSampler, refractedVecR).r;
	color.g = texture (cSampler, refractedVecG).g;
	color.b = texture (cSampler, refractedVecB).b;
	color.a = 1.0;

	FragColor = color;
}
