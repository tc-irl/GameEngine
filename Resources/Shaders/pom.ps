// Based on Antons OpenGL 4 Tutorials book & bennybox youtube video: https://www.youtube.com/watch?v=dF5rOveGOJc

#version 400

uniform vec3 ambientColor;
uniform vec3 specularColor;
uniform vec3 diffuseColor;

uniform float ambientIntensity;
uniform float specularIntensity;
uniform float diffuseIntensity;

uniform float specularShininess;
uniform float roughness; 
uniform vec3 vLightDir;

in vec2 texCoord0;

in vec3 position_eye;
in vec3 normal_eye;
in mat3 tbnMatrix;

uniform sampler2D gSampler;
uniform sampler2D nSampler;
uniform sampler2D hSampler;

uniform vec3 cameraPosition;

uniform vec3 vEye;
uniform float parallaxScale;
uniform	float bias;

in vec3 worldPos0, worldNormal0, worldTangent0, worldToLightDir0, worldToCameraDir0;
in vec3 toLightInTangent0, toCameraInTangent0;


uniform mat4 view;

out vec4 FragColor;


vec2 CalcParallaxMapping(in vec3 V, in vec2 T, out float parallaxHeight)
{
// determine optimal number of layers
   const float minLayers = 10;
   const float maxLayers = 15;
   float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0, 0, 1), V)));

   // height of each layer
   float layerHeight = 1.0 / numLayers;
   // current depth of the layer
   float curLayerHeight = 0;
   // shift of texture coordinates for each layer
   vec2 dtex = parallaxScale * V.xy / numLayers;

   // current texture coordinates
   vec2 currentTextureCoords = T;

   // depth from heightmap
   float heightFromTexture = texture(hSampler, currentTextureCoords).r;

   // while point is above the surface
   while(heightFromTexture > curLayerHeight) 
   {
      // to the next layer
      curLayerHeight += layerHeight; 
      // shift of texture coordinates
      currentTextureCoords -= dtex;
      // new depth from heightmap
      heightFromTexture = texture(hSampler, currentTextureCoords).r;
   }

   ///////////////////////////////////////////////////////////

   // previous texture coordinates
   vec2 prevTCoords = currentTextureCoords + dtex;

   // heights for linear interpolation
   float nextH = heightFromTexture - curLayerHeight;
   float prevH = texture(hSampler, prevTCoords).r
                           - curLayerHeight + layerHeight;

   // proportions for linear interpolation
   float weight = nextH / (nextH - prevH);

   // interpolation of texture coordinates
   vec2 finalTexCoords = prevTCoords * weight + currentTextureCoords * (1.0-weight);

   // interpolation of depth values
   parallaxHeight = curLayerHeight + prevH * weight + nextH * (1.0 - weight);

   // return result
   return finalTexCoords;
}


float parallaxSoftShadowMultiplier(in vec3 L, in vec2 initialTexCoord, in float initialHeight)
{
      float shadowMultiplier = 1;

   const float minLayers = 15;
   const float maxLayers = 30;

   // calculate lighting only for surface oriented to the light source
   if(dot(vec3(0, 0, 1), L) > 0)
   {
      // calculate initial parameters
      float numSamplesUnderSurface  = 0;
      shadowMultiplier  = 0;
      float numLayers   = mix(maxLayers, minLayers, abs(dot(vec3(0, 0, 1), L)));
      float layerHeight = initialHeight / numLayers;
      vec2 texStep   = parallaxScale * L.xy / L.z / numLayers;

      // current parameters
      float currentLayerHeight   = initialHeight - layerHeight;
      vec2 currentTextureCoords  = initialTexCoord + texStep;
      float heightFromTexture = texture(hSampler, currentTextureCoords).r;
      int stepIndex  = 1;

      // while point is below depth 0.0 )
      while(currentLayerHeight > 0)
      {
         // if point is under the surface
         if(heightFromTexture < currentLayerHeight)
         {
            // calculate partial shadowing factor
            numSamplesUnderSurface  += 1;
            float newShadowMultiplier  = (currentLayerHeight - heightFromTexture) *
                                             (1.0 - stepIndex / numLayers);
            shadowMultiplier  = max(shadowMultiplier, newShadowMultiplier);
         }

         // offset to the next layer
         stepIndex   += 1;
         currentLayerHeight   -= layerHeight;
         currentTextureCoords += texStep;
         heightFromTexture = texture(hSampler, currentTextureCoords).r;
      }

      // Shadowing factor should be 1 if there were no points under the surface
      if(numSamplesUnderSurface < 1)
      {
         shadowMultiplier = 1;
      }
      else
      {
         shadowMultiplier = 1.0 - shadowMultiplier;
      }
   }
   return shadowMultiplier;
}

vec4 CalcLighting(in vec2 T, in vec3 L, in vec3 V, float shadowMultiplier)
{
// restore normal from normal map
   vec3 N = normalize(texture(nSampler, T).xyz * 2 - 1);
   vec3 D = texture(gSampler, T).rgb;

   // ambient lighting
   float iamb = 0.2;
   // diffuse lighting
   float idiff = clamp(dot(N, -L), 0, 1);
   // specular lighting
   float ispec = 0;
   if(dot(N, L) > 0.2)
   {
      vec3 R = reflect(-L, N);
      ispec = pow(dot(R, V), 32) / 1.5;
   }

   vec4 resColor;
   resColor.rgb = D * (iamb + (idiff + ispec) * pow(shadowMultiplier, 4));
   resColor.a = 1;

   return resColor;

}

void main()
{
	vec3 V = normalize(toCameraInTangent0);
	vec3 L = normalize(toLightInTangent0);

	float parallaxHeight;

	vec2 T = CalcParallaxMapping(V, texCoord0, parallaxHeight);

   float shadowMultiplier = parallaxSoftShadowMultiplier(L, T, parallaxHeight - 0.05);

	FragColor = CalcLighting(T, L, V, shadowMultiplier);
};


